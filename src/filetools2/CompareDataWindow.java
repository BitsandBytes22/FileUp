package filetools2;

//import static filetools2.metadataHomePage.ChosenFiles;
import java.io.BufferedReader;

import java.io.File;
import java.nio.file.Files;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.nio.file.Path;
import java.io.FileReader;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Sneha
 */
public class CompareDataWindow extends javax.swing.JFrame {
    
    int size;
    String[] pathArray;
    SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
    Path parentPath;
    Path childPath;
    File[] listOfFiles;
    String folderPath;
    

    /**
     * Creates new form CompareDataWindow
     */
    public CompareDataWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        folder1table = new javax.swing.JTable();
        ComparePathField = new javax.swing.JTextField();
        ComapareBrowse = new javax.swing.JButton();
        CompareClear = new javax.swing.JButton();
        CompareUpload = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        CompareClear1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        folder1table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Last Modified Data", "Type", "Size"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(folder1table);

        ComparePathField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComparePathFieldActionPerformed(evt);
            }
        });

        ComapareBrowse.setText("BROWSE");
        ComapareBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComapareBrowseActionPerformed(evt);
            }
        });

        CompareClear.setText("CLEAR TABLE");

        CompareUpload.setText("UPLOAD");
        CompareUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompareUploadActionPerformed(evt);
            }
        });

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        CompareClear1.setText("DELETE REDUNDANT FILES");
        CompareClear1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompareClear1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(108, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CompareClear1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CompareClear, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ComparePathField, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CompareUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ComapareBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(66, 66, 66))
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComparePathField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComapareBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CompareUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CompareClear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CompareClear1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ComparePathFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComparePathFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComparePathFieldActionPerformed

    private void ComapareBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComapareBrowseActionPerformed

      JFileChooser chooser = new JFileChooser();
      chooser.setCurrentDirectory(new java.io.File("."));
      chooser.setDialogTitle("select folder");
      
      chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      
      chooser.setAcceptAllFileFilterUsed(false);
      
    if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
      System.out.println("getCurrentDirectory(): " 
         +  chooser.getCurrentDirectory());
      System.out.println("getSelectedFile() : " 
         +  chooser.getSelectedFile());
      folderPath = chooser.getSelectedFile().getAbsolutePath();
      ComparePathField.setText(folderPath);            
      }   
    else {
      System.out.println("No Selection ");
      }
        
        
    }//GEN-LAST:event_ComapareBrowseActionPerformed

    private void CompareUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompareUploadActionPerformed

        try{
           // Path path = Paths.get(folderpath1);
           File directory=new File(folderPath);
           size=directory.list().length;
          //  long size = Files.list(Paths.get(folderpath1)).count();
           /* for(int i=0;i<size;i++){
                String fileArray[i]= 
                
            }*/
          // File folder1 = new File(folderpath1);
           listOfFiles = directory.listFiles();
           for (File file : listOfFiles) {
               
               if (file.isFile()) {
                   
                   String name=file.getName();
                   String modifiedDate=sdf.format(file.lastModified());
                   String type=Files.probeContentType(file.toPath());
                   String sizeKB=Long.toString(file.length());
                   String[] data={name,modifiedDate,type,sizeKB};
                   
                   DefaultTableModel model = (DefaultTableModel)folder1table.getModel();
                   
                   model.addRow(data);
                   
                   
               }
               }
                   
                   
               }
        catch(Exception e){
            
        }
       
  
    }//GEN-LAST:event_CompareUploadActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void CompareClear1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompareClear1ActionPerformed

        try{
        for (int i=0;i<listOfFiles.length;i++) {
            
            for(int j=i+1;j<listOfFiles.length;j++){
                
                BufferedReader reader1 = new BufferedReader(new FileReader(listOfFiles[i].getAbsolutePath()));
                
                BufferedReader reader2 = new BufferedReader(new FileReader(listOfFiles[j].getAbsolutePath()));
                
                String line1 = reader1.readLine();
         
                String line2 = reader2.readLine();
                
                boolean areEqual = true;
                int lineNum = 1;
                
            while (line1 != null || line2 != null){
        
                if(line1 == null || line2 == null){
            
                    areEqual = false;
                 
                    break;
            }
                else if(! line1.equalsIgnoreCase(line2)){
            
                    areEqual = false;
                 
                    break;
            }
             
                line1 = reader1.readLine();

                line2 = reader2.readLine();

                lineNum++;
                
           }
            
        if(areEqual){
        
            File f1 = new File(listOfFiles[i].getAbsolutePath());
            f1.deleteOnExit();
            
            
            System.out.println("Done");
        }
        
        reader1.close();
        reader2.close();
        }
        }
        }
        catch(Exception e){
            
        }
    }//GEN-LAST:event_CompareClear1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompareDataWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompareDataWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompareDataWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompareDataWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CompareDataWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ComapareBrowse;
    private javax.swing.JButton CompareClear;
    private javax.swing.JButton CompareClear1;
    private javax.swing.JTextField ComparePathField;
    private javax.swing.JButton CompareUpload;
    private javax.swing.JTable folder1table;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
